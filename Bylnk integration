Steps of integrating functions to blynk

1.Set Up a Blynk Account:
First, you'll need to create a Blynk account and set up a project. You can do this via the Blynk app on your smartphone.

2.Install Blynk Library:
You’ll need the Blynk library in your Arduino IDE or PlatformIO. Here’s how to install it in Arduino IDE:

3.Go to Sketch → Include Library → Manage Libraries.
Search for Blynk and install it.
Create a Blynk Project:

4.Open the Blynk app on your smartphone and create a new project.
Choose your device type (e.g., ESP32) and connection type (Wi-Fi).
Blynk will email you an Auth Token. You will use this token in your code to authenticate your device.
Add widgets like Value Display to show the cow's GPS coordinates and a Notification widget to receive alerts.

5.Modify the Code to Send Data to Blynk:
You'll need to modify the GPS and stationary monitoring code to send data to the Blynk app. Blynk uses virtual pins to handle data, which you will map to specific widgets in the app.


for stationary time monitoring

#define BLYNK_PRINT Serial  // Enables printing to the Serial monitor
#include <WiFi.h>  // WiFi library for ESP32
#include <BlynkSimpleEsp32.h>  // Blynk library
#include <TinyGPS++.h>  // GPS library

// Blynk Auth Token (from your Blynk app)
char auth[] = "YOUR_BLYNK_AUTH_TOKEN";

// Your WiFi credentials
char ssid[] = "YOUR_WIFI_SSID";
char pass[] = "YOUR_WIFI_PASSWORD";

TinyGPSPlus gps;
BlynkTimer timer;

// Variables for last GPS position and time
float lastLat = 0.0;
float lastLon = 0.0;
unsigned long lastMoveTime = 0;

// Stationary time threshold (1 hour in milliseconds)
const unsigned long stationaryThreshold = 3600000;
const float movementThreshold = 5.0;  // Ignore movement under 5 meters

// Function to calculate distance using Haversine formula
float calculateDistance(float lat1, float lon1, float lat2, float lon2) {
    const float R = 6371000;  // Radius of Earth in meters
    float dLat = radians(lat2 - lat1);
    float dLon = radians(lon2 - lon1);
    lat1 = radians(lat1);
    lat2 = radians(lat2);

    float a = sin(dLat / 2) * sin(dLon / 2) +
              cos(lat1) * cos(lat2) * sin(dLon / 2) * sin(dLon / 2);
    float c = 2 * atan2(sqrt(a), sqrt(1 - a));

    return R * c;  // Returns distance in meters
}

// Function to monitor cow's movement and send data to Blynk
void monitorMovement(float currentLat, float currentLon) {
    float distance = calculateDistance(lastLat, lastLon, currentLat, currentLon);

    if (distance < movementThreshold) {
        unsigned long currentTime = millis();
        if (currentTime - lastMoveTime > stationaryThreshold) {
            Serial.println("WARNING: Cow has been stationary for over 1 hour.");
            Blynk.notify("Warning: Cow is stationary for over 1 hour!");
        }
    } else {
        // Cow has moved, reset the stationary timer
        lastMoveTime = millis();
        lastLat = currentLat;
        lastLon = currentLon;
        Serial.println("Cow has moved. Resetting stationary timer.");
    }

    // Send GPS data to Blynk app
    Blynk.virtualWrite(V1, currentLat);  // Send latitude to Virtual Pin V1
    Blynk.virtualWrite(V2, currentLon);  // Send longitude to Virtual Pin V2
}

void setup() {
    Serial.begin(115200);
    Serial1.begin(9600);  // GPS module

    // Connect to Wi-Fi
    WiFi.begin(ssid, pass);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");

    // Connect to Blynk
    Blynk.begin(auth, ssid, pass);

    // Set up timer to run monitoring function every 10 seconds
    timer.setInterval(10000L, []() {
        if (gps.location.isUpdated()) {
            float currentLat = gps.location.lat();
            float currentLon = gps.location.lng();
            monitorMovement(currentLat, currentLon);
        }
    });
}

void loop() {
    Blynk.run();  // Run Blynk
    timer.run();  // Run timer
}

Setting Up the Blynk App:
Add Widgets:

Value Display: Add two value displays to show the cow’s latitude and longitude.
Link the first to Virtual Pin V1 for latitude.
Link the second to Virtual Pin V2 for longitude.
Notification: Add the notification widget to receive alerts.
Customize the Interface:

You can drag and drop the widgets in the Blynk app to design your dashboard. No need for additional coding to visualize the cow's GPS data and receive alerts.


Integration of Geo-fencing function
Steps to Use LoRa Communication and Integrate with Blynk:
Cow's TTGO (LoRa Sender): This device collects GPS data and sends it to the base station using LoRa.
Base Station TTGO (LoRa Receiver): This device receives the GPS data from the cow, processes it, and forwards it to Blynk.
Step 1: Cow’s TTGO (LoRa Sender)
The cow’s TTGO board will periodically send GPS coordinates to the base station via LoRa.
Code for Cow’s TTGO (LoRa Sender):
#include <LoRa.h>
#include <TinyGPS++.h>

TinyGPSPlus gps;

void setup() {
    Serial.begin(115200);
    Serial1.begin(9600);  // GPS module on Serial1 (TX/RX)

    // Initialize LoRa
    LoRa.begin(915E6);  // Set frequency to 915 MHz (for your region)

    Serial.println("LoRa GPS Sender Setup Done");
}

void loop() {
    if (Serial1.available() > 0) {
        gps.encode(Serial1.read());
        if (gps.location.isUpdated()) {
            float currentLat = gps.location.lat();
            float currentLon = gps.location.lng();

            // Send GPS data via LoRa
            LoRa.beginPacket();
            LoRa.print(currentLat, 6);  // Send latitude
            LoRa.print(',');
            LoRa.print(currentLon, 6);  // Send longitude
            LoRa.endPacket();

            Serial.print("Sent Latitude: ");
            Serial.println(currentLat, 6);
            Serial.print("Sent Longitude: ");
            Serial.println(currentLon, 6);
        }
    }

    delay(10000);  // Send GPS data every 10 seconds
}

Step 2: Base Station TTGO (LoRa Receiver and Blynk Integration)
The base station TTGO board will receive the GPS data via LoRa, process it, and send it to Blynk.

Code for Base Station TTGO (LoRa Receiver and Blynk Integration):
#define BLYNK_PRINT Serial  // Enable debugging via Serial
#include <WiFi.h>           // WiFi library for ESP32
#include <BlynkSimpleEsp32.h>  // Blynk library for ESP32
#include <LoRa.h>
#include <BlynkTimer.h>

BlynkTimer timer;

// Variables for GPS coordinates and LoRa data
float lastLat = 0.0;
float lastLon = 0.0;
unsigned long lastMoveTime = 0;

// Stationary time threshold (e.g., 1 hour)
const unsigned long stationaryThreshold = 3600000;  // 1 hour
const float movementThreshold = 5.0;  // Ignore movement under 5 meters

// Blynk Auth Token (from the Blynk app)
char auth[] = "YOUR_BLYNK_AUTH_TOKEN";

// Wi-Fi credentials
char ssid[] = "YOUR_WIFI_SSID";
char pass[] = "YOUR_WIFI_PASSWORD";

// Function to calculate distance using the Haversine formula (returns meters)
float calculateDistance(float lat1, float lon1, float lat2, float lon2) {
    const float R = 6371000;  // Radius of the Earth in meters
    float dLat = radians(lat2 - lat1);
    float dLon = radians(lon2 - lon1);

    lat1 = radians(lat1);
    lat2 = radians(lat2);

    float a = sin(dLat / 2) * sin(dLon / 2) +
              cos(lat1) * cos(lat2) * sin(dLon / 2) * sin(dLon / 2);
    float c = 2 * atan2(sqrt(a), sqrt(1 - a));

    return R * c;  // Returns distance in meters
}

// Function to monitor cow's movement and send data to Blynk
void monitorMovement(float currentLat, float currentLon) {
    float distance = calculateDistance(lastLat, lastLon, currentLat, currentLon);

    if (distance < movementThreshold) {
        unsigned long currentTime = millis();  // Get the current time in milliseconds

        if (currentTime - lastMoveTime > stationaryThreshold) {
            Serial.println("WARNING: Cow has been stationary for over 1 hour.");
            Blynk.notify("Warning: Cow has been stationary for over 1 hour!");
        }
    } else {
        // If the cow has moved, reset the timer and update the last recorded position
        lastMoveTime = millis();  // Update the time the cow last moved
        lastLat = currentLat;  // Update last latitude
        lastLon = currentLon;  // Update last longitude
        Serial.println("Cow has moved. Resetting stationary timer.");
    }

    // Send GPS data to Blynk
    Blynk.virtualWrite(V1, currentLat);  // Send latitude to Virtual Pin V1
    Blynk.virtualWrite(V2, currentLon);  // Send longitude to Virtual Pin V2
}

void setup() {
    Serial.begin(115200);

    // Connect to Wi-Fi
    WiFi.begin(ssid, pass);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");

    // Connect to Blynk
    Blynk.begin(auth, ssid, pass);

    // Initialize LoRa
    LoRa.begin(915E6);  // Set frequency to 915 MHz

    // Timer to process LoRa data every 10 seconds
    timer.setInterval(10000L, []() {
        int packetSize = LoRa.parsePacket();
        if (packetSize) {
            String loRaData = "";
            while (LoRa.available()) {
                loRaData += (char)LoRa.read();
            }
            Serial.println("Received LoRa packet: " + loRaData);

            // Parse the received GPS data
            float receivedLat = loRaData.substring(0, loRaData.indexOf(',')).toFloat();
            float receivedLon = loRaData.substring(loRaData.indexOf(',') + 1).toFloat();

            // Monitor movement based on received GPS data
            monitorMovement(receivedLat, receivedLon);
        }
    });
}

void loop() {
    Blynk.run();  // Run Blynk
    timer.run();  // Run the timer
}


Blynk App Setup:
Add Widgets:
Value Display Widgets:
Add two Value Display widgets in the Blynk app to show the cow’s latitude and longitude.
Set Virtual Pin V1 for the latitude widget and V2 for the longitude widget.
Notification Widget:
Add the Notification widget to receive alerts when the cow is stationary for too long.

